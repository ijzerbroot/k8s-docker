kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: artifactory
  labels:
    k8s-app: artifactory
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "services"
  - "namespaces"
  - "endpoints"
  verbs:
  - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: artifactory
  labels:
    k8s-app: artifactory
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: artifactory
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: artifactory
  apiGroup: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: artifactory
  namespace: default
  labels:
    k8s-app: artifactory
    version: v1
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: artifactory-data-volume
  labels:
    type: local
#  annotations:
#    pv.beta.kubernetes.io/gid: "2000"
spec:
  storageClassName: manual
  capacity:
    storage: 6Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/var/lib/kubedata/artifactorydata"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: artifactory-data-claim
#  annotations:
#    pv.beta.kubernetes.io/gid: "2000"
  namespace: default
  labels:
    k8s-app: artifactory
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 6Gi
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: artifactory
  namespace: default
  labels:
    k8s-app: artifactory
    version: v1
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: artifactory
      version: v1
  template:
    metadata:
      labels:
        k8s-app: artifactory
        version: v1
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: artifactory
      volumes:
        - name: artifactorydata
          persistentVolumeClaim:
            claimName: artifactory-data-claim
      containers:
#        - image: docker.elastic.co/artifactory/kibana-oss:6.1.0
        - image: docker.bintray.io/jfrog/artifactory-oss:latest
          name: artifactory
          resources:
            # need more cpu upon initialization, therefore burstable class
            limits:
              cpu: 300m
            requests:
              cpu: 100m
          ports:
            - containerPort: 8081
              name: artifactoryport
              protocol: TCP
          volumeMounts:
            - mountPath: /var/opt/jfrog/artifactory
              name: artifactorydata
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: artifactory
  namespace: default
  labels:
    k8s-app: artifactory
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Artifactory"
spec:
  ports:
  - port: 8081
    protocol: TCP
    targetPort: artifactoryport
  selector:
    k8s-app: artifactory
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: artifactory-ui
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik
  #  traefik.frontend.rule.type: PathPrefixStrip
spec:
  rules:
  - host: artifactory.k8shc
    http:
      paths:
        - path: /artifactory
          backend:
            serviceName: artifactory
            servicePort: 8081
