kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: loki
  labels:
    k8s-app: loki
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups:
  - ""
  resources:
  - "services"
  - "namespaces"
  - "endpoints"
  verbs:
  - "get"
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: loki
  labels:
    k8s-app: loki
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: loki
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: loki
  apiGroup: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki
  namespace: default
  labels:
    k8s-app: loki
    version: v1
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: loki-data-volume
  labels:
    type: local
#  annotations:
#    pv.beta.kubernetes.io/gid: "2000"
spec:
  storageClassName: manual
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/var/lib/kubedata/lokidata"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lokidata-claim
#  annotations:
#    pv.beta.kubernetes.io/gid: "2000"
  namespace: default
  labels:
    k8s-app: loki
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: loki
  namespace: default
  labels:
    k8s-app: loki
    version: v1
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: loki
      version: v1
  template:
    metadata:
      labels:
        k8s-app: loki
        version: v1
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: loki
      volumes:
        - name: lokidata
          persistentVolumeClaim:
            claimName: lokidata-claim
      containers:
#        - image: docker.elastic.co/loki/kibana-oss:6.1.0
        - image: localhost/loki:latest
          name: loki
          resources:
            # need more cpu upon initialization, therefore burstable class
            limits:
              cpu: 300m
            requests:
              cpu: 100m
          ports:
            - containerPort: 22
              name: lokiport
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/loki
              name: lokidata
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: default
  labels:
    k8s-app: loki
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Loki"
spec:
  type: NodePort
  ports:
  - port: 30022
    protocol: TCP
    nodePort: 30022
  selector:
    k8s-app: loki
