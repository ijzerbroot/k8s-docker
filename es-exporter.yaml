---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: es-exporter
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  - cluster
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: es-exporter
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: es-exporter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: es-exporter
subjects:
- kind: ServiceAccount
  name: es-exporter
  namespace: monitoring
---
kind: ConfigMap
metadata:
  name: runsh
  namespace: monitoring
apiVersion: v1
data:
  run.sh: |-
    #!/bin/bash
    
    # install jq and python if necessary
    if [ ! -f /usr/bin/jq ]
    then
      dnf -y install jq
    fi
    
    cd /data
    
    while sleep 30
    do
    
    cat /dev/null > /data/newmetrics
    DATUM="`date +%Y.%m.%d`"
    
    curl -s -X GET http://elasticsearch:9200/filebeat-*-${DATUM}/_search -H 'Content-Type: application/json' -d "
    {
         \"from\" : 0, \"size\" : 1000,
         \"query\": {
             \"range\" : {
                 \"@timestamp\" : {
                     \"gte\" : \"now-2m\",
                     \"lt\" :  \"now\"
                 }
             }
         }
    }" | jq '.hits.hits[] | "\(._source.docker.container.labels.com.docker.swarm.service.name): \(._source.log)"' | sed 's/ /_/g' | sed 's/"/+/g' | grep -v prometheus > /data/last2min.txt
    
    
    cat /dev/null > /data/foutenunfiltered.txt
    for line in `cat /es-exporter/searches | sed 's/ /_/g' | sed 's/"/+/g'`
    do
      grep -i ${line} /data/last2min.txt >> /data/foutenunfiltered.txt
    done
    
    # Filter out NOT lines
    cp /data/foutenunfiltered.txt /data/foutenfiltered.txt
    for notline in `grep '^NOT' /es-exporter/searches | sed 's/ /_/g' | sed 's/"/+/g' | sed 's/^NOT//'`
    do
      grep -v -i ${notline} /data/foutenfiltered.txt > /data/foutenfiltered.txt.tmp && cp /data/foutenfiltered.txt.tmp /data/foutenfiltered.txt
    done
    COUNT=`grep -c -i ${line} /data/foutenfiltered.txt`
    TEXT="`grep -i ${line} /data/foutenfiltered.txt | tr '\n' ' ' | sed 's/_/ /g' | sed 's/+/ /g'`"
    
    DATUM=`date +%Y-%m-%dT%H:%M:%SZ`
    EINDDATUM=`date --date="3min" +%Y-%m-%dT%H:%M:%SZ`
    if [ ${COUNT} -gt 0 ]
    then
        curl -s -X POST http://alertmanager:9093/api/v1/alerts -H "Content-Type: application/json" -d "
        [
            {
                \"labels\": {
                    \"alertname\": \"${line} found in logs\",
                    \"channel\": \"exceptions\"
                },
                \"annotations\": {
                    \"summary\": \"${line} found in logs\",
                    \"description\": \"${TEXT}\"
                },
                \"startsAt\": \"${DATUM}\",
                \"endsAt\": \"${EINDDATUM}\",
                \"generatorURL\": \"https://kibana.k8shc\"
            }
    ]"
        fi
    
    done
    
    done
---
kind: ConfigMap
metadata:
  name: es-exporter-config
  namespace: monitoring
apiVersion: v1
data:
  searches: |-
    error

  config: |-
    ESHOST=elasticsearch.default

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: es-exporter
  namespace: monitoring
  labels:
    k8s-app: es-exporter
    version: v1
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: es-exporter
      version: v1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: es-exporter
        k8s-app: es-exporter
        version: v1
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: es-exporter
      containers:
        #- command: ["sleep"]
        #  args: ["infinity"]
        - command: ["/scripts/run.sh"]
          image: docker.io/fedora:27
          imagePullPolicy: IfNotPresent
          name: es-exporter
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: /es-exporter
              name: config-volume
            - mountPath: /data
              name: data-volume
            - mountPath: /scripts
              name: runsh
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: data-volume
          emptyDir: {}
        - name: config-volume
          configMap:
            name: es-exporter-config
        - name: runsh
          configMap:
            name: runsh
            defaultMode: 0744
---
apiVersion: v1
kind: Service
metadata:
  name: es-exporter
  namespace: monitoring
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    k8s-app: es-exporter
